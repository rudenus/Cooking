// <auto-generated />
using System;
using Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dal.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240602120755_removeUserName")]
    partial class removeUserName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dal.Entities.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("CommentId");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Dal.Entities.File", b =>
                {
                    b.Property<Guid>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FileId");

                    b.ToTable("Files", null, t =>
                        {
                            t.HasCheckConstraint("CK_Files_Type_Has_Allowed_Values", "\"Type\" in ('Photo','Video')");
                        });
                });

            modelBuilder.Entity("Dal.Entities.Ingridient", b =>
                {
                    b.Property<Guid>("IngridientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("IngridientId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingridients", null, t =>
                        {
                            t.HasCheckConstraint("CK_Ingridients_Weight_Is_Positive", "\"Weight\" >= 0");
                        });
                });

            modelBuilder.Entity("Dal.Entities.Like", b =>
                {
                    b.Property<Guid>("PublicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("PublicationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes", (string)null);
                });

            modelBuilder.Entity("Dal.Entities.Operation", b =>
                {
                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Step")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<int>("TimeInSeconds")
                        .HasColumnType("integer");

                    b.HasKey("RecipeId", "Step");

                    b.HasIndex("FileId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Operations", null, t =>
                        {
                            t.HasCheckConstraint("CK_Operations_Step_Is_Positive", "\"Step\" >= 0");

                            t.HasCheckConstraint("CK_Operations_TimeInSeconds_Is_Positive", "\"TimeInSeconds\" >= 0");
                        });
                });

            modelBuilder.Entity("Dal.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Calories")
                        .HasColumnType("integer");

                    b.Property<int>("Carbohydrates")
                        .HasColumnType("integer");

                    b.Property<int>("Fats")
                        .HasColumnType("integer");

                    b.Property<bool>("IsModerated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Proteins")
                        .HasColumnType("integer");

                    b.HasKey("ProductId");

                    b.ToTable("Products", null, t =>
                        {
                            t.HasCheckConstraint("CK_Products_Calories_Is_Positive", "\"Calories\" >= 0");

                            t.HasCheckConstraint("CK_Products_Carbohydrates_Is_Positive", "\"Carbohydrates\" >= 0");

                            t.HasCheckConstraint("CK_Products_Fats_Is_Positive", "\"Fats\" >= 0");

                            t.HasCheckConstraint("CK_Products_Proteins_Is_Positive", "\"Proteins\" >= 0");
                        });
                });

            modelBuilder.Entity("Dal.Entities.Publication", b =>
                {
                    b.Property<Guid>("PublicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CommentsNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<int>("LikesNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("PublicationId");

                    b.HasIndex("FileId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Publications", null, t =>
                        {
                            t.HasCheckConstraint("CK_Publications_CommentsNumber_Is_Positive", "\"CommentsNumber\" >= 0");

                            t.HasCheckConstraint("CK_Publications_LikesNumber_Is_Positive", "\"LikesNumber\" >= 0");
                        });
                });

            modelBuilder.Entity("Dal.Entities.Recipe", b =>
                {
                    b.Property<Guid>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Calories")
                        .HasColumnType("integer");

                    b.Property<int>("CaloriesPer100")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer")
                        .HasComputedColumnSql("\"Calories\" * 100 /\"Weight\"", true);

                    b.Property<int>("Carbohydrates")
                        .HasColumnType("integer");

                    b.Property<int>("CarbohydratesPer100")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer")
                        .HasComputedColumnSql("\"Carbohydrates\" * 100 /\"Weight\"", true);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Fats")
                        .HasColumnType("integer");

                    b.Property<int>("FatsPer100")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer")
                        .HasComputedColumnSql("\"Fats\" * 100 /\"Weight\"", true);

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsModerated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Proteins")
                        .HasColumnType("integer");

                    b.Property<int>("ProteinsPer100")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer")
                        .HasComputedColumnSql("\"Proteins\" * 100 /\"Weight\"", true);

                    b.Property<int>("ServingsNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("RecipeId");

                    b.HasIndex("FileId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes", null, t =>
                        {
                            t.HasCheckConstraint("CK_Recipes_Calories_Is_Positive", "\"Calories\" >= 0");

                            t.HasCheckConstraint("CK_Recipes_Carbohydrates_Is_Positive", "\"Carbohydrates\" >= 0");

                            t.HasCheckConstraint("CK_Recipes_Fats_Is_Positive", "\"Fats\" >= 0");

                            t.HasCheckConstraint("CK_Recipes_Proteins_Is_Positive", "\"Proteins\" >= 0");

                            t.HasCheckConstraint("CK_Recipes_ServingsNumber_Is_Positive", "\"ServingsNumber\" >= 0");

                            t.HasCheckConstraint("CK_Recipes_Weight_Is_Positive", "\"Weight\" >= 0");
                        });
                });

            modelBuilder.Entity("Dal.Entities.ReplacementProduct", b =>
                {
                    b.Property<Guid>("ReplacingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReplacementId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReplacementLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ReplacingId", "ReplacementId");

                    b.HasIndex("ReplacementId");

                    b.ToTable("ReplacementProducts", null, t =>
                        {
                            t.HasCheckConstraint("CK_ReplacementProducts_ReplacementLevel_Has_Allowed_Values", "\"ReplacementLevel\" in ('Low','Medium','Hard')");
                        });
                });

            modelBuilder.Entity("Dal.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Login"), new[] { "UserId", "PasswordHash" });

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Users", null, t =>
                        {
                            t.HasCheckConstraint("CK_Users_Role_Has_Allowed_Values", "\"Role\" in ('Default','Moderator')");
                        });
                });

            modelBuilder.Entity("Dal.Entities.Comment", b =>
                {
                    b.HasOne("Dal.Entities.Publication", "Publication")
                        .WithMany("Comments")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dal.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dal.Entities.Ingridient", b =>
                {
                    b.HasOne("Dal.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dal.Entities.Recipe", "Recipe")
                        .WithMany("Ingridients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Dal.Entities.Like", b =>
                {
                    b.HasOne("Dal.Entities.Publication", "Publication")
                        .WithMany("Likes")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dal.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dal.Entities.Operation", b =>
                {
                    b.HasOne("Dal.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("Dal.Entities.Recipe", "Recipe")
                        .WithMany("Operations")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Dal.Entities.Publication", b =>
                {
                    b.HasOne("Dal.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("Dal.Entities.Recipe", "Recipe")
                        .WithMany("Publications")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dal.Entities.User", "User")
                        .WithMany("Publications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dal.Entities.Recipe", b =>
                {
                    b.HasOne("Dal.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("Dal.Entities.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dal.Entities.ReplacementProduct", b =>
                {
                    b.HasOne("Dal.Entities.Product", "Replacement")
                        .WithMany()
                        .HasForeignKey("ReplacementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dal.Entities.Product", "Replacing")
                        .WithMany()
                        .HasForeignKey("ReplacingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Replacement");

                    b.Navigation("Replacing");
                });

            modelBuilder.Entity("Dal.Entities.Publication", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Dal.Entities.Recipe", b =>
                {
                    b.Navigation("Ingridients");

                    b.Navigation("Operations");

                    b.Navigation("Publications");
                });

            modelBuilder.Entity("Dal.Entities.User", b =>
                {
                    b.Navigation("Publications");

                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
